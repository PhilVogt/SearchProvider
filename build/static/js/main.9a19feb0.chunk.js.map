{"version":3,"sources":["components/SearchProvider.jsx","components/FileUploader.jsx","components/MainScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["launchAppAction","browserUUID","topics","SearchProvider","useState","currentQuery","setCurrentQuery","useEffect","a","query","startsWith","lowercaseQuery","toLowerCase","appId","name","manifest","manifestType","version","title","description","actions","getManifestUrl","url","Promise","resolve","reject","req","XMLHttpRequest","open","setRequestHeader","onload","status","response","statusText","onerror","send","result","action","create","body","JSON","stringify","category","buttons","fullManifest","fin","Platform","getCurrent","platform","applySnapshot","console","error","log","provider","topic","onSearch","onResultDispatch","searchTopic","undefined","subscribe","uuid","register","init","deregister","disconnect","className","FileUploader","sendFile","file","xhr","onreadystatechange","this","readyState","DONE","formData","FormData","append","onDrop","ev","preventDefault","dataTransfer","items","i","length","kind","getAsFile","files","onDragOver","icon","faFileUpload","size","MainScreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a19feb0.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { subscribe } from '@openfin/search-api';\r\nimport { create, } from 'openfin-notifications';\r\n\r\n// Needed to fix \"no-undef\" linter error\r\n/* global fin */\r\nconst launchAppAction = \"launch\";\r\nconst browserUUID = \"openfin-browser\";\r\nconst topics = {\r\n    All: \"all\", // Search topic for the aggregated search view in Home.\r\n    Apps: \"apps\", // Search topic for the `Launch` view in Home.\r\n    Workspaces: \"workspaces\" // Search topic for the `Workspaces` view in Home.\r\n}\r\n\r\n\r\nfunction SearchProvider() {\r\n    const [currentQuery, setCurrentQuery] = useState(\"\");\r\n    useEffect(() => {\r\n        async function handleSearch({ query }) {\r\n            // This could make a fetch call to a backend or rest endpoint...\r\n            if ((!query.startsWith('http://') && !query.startsWith('https://'))) {\r\n                return [];\r\n            }\r\n            const lowercaseQuery = query.toLowerCase();\r\n            setCurrentQuery(query);\r\n            //return apps.filter((app) => app.title.toLowerCase().indexOf(lowercaseQuery) !== -1);\r\n            return [{\r\n                appId: \"exampleApp\",\r\n                name: \"Launcher\",\r\n                manifest: lowercaseQuery,\r\n                manifestType: \"snapshot\",\r\n                version: \"1.0\",\r\n                title: \"Quick Launch\",\r\n                description: \"Type a URL to launch in a browser.\",\r\n                actions: [launchAppAction]\r\n            }]\r\n        }\r\n\r\n        async function getManifestUrl(url) {\r\n            return new Promise((resolve, reject) => {\r\n                var req = new XMLHttpRequest();\r\n                req.open(\"post\", \"http://localhost:9999/manifest/\", true);\r\n                req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\r\n                req.onload = () => {\r\n                    if (req.status >= 200 && req.status < 300) {\r\n                        resolve(req.response);\r\n                    } else {\r\n                        reject({\r\n                            status: req.status,\r\n                            statusText: req.statusText\r\n                        });\r\n                    }\r\n                }\r\n                req.onerror = () => {\r\n                    reject({\r\n                        status: req.status,\r\n                        statusText: req.statusText\r\n                    });\r\n                };\r\n\r\n                req.send(`url=${url}`);\r\n            });\r\n        }\r\n\r\n        async function handleResultDispatch(result) {\r\n            if (result.action === launchAppAction) {\r\n                try {\r\n                    create({\r\n                        title: 'Launching',\r\n                        body: `About to launch ${JSON.stringify(result)}!`,\r\n                        category: 'Event',\r\n                        buttons: [\r\n                            {\r\n                                title: 'Im OK with that'\r\n                            }\r\n                        ]\r\n                    });\r\n                    const fullManifest = await getManifestUrl(result.manifest);\r\n                    const platform = await fin.Platform.getCurrent();\r\n                    await platform.applySnapshot(fullManifest);\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n                console.log(\"Done\");\r\n            }\r\n        }\r\n\r\n        const provider = {\r\n            name: \"my-search-provider\",\r\n            topic: \"My Search Provider\",\r\n\r\n            // Called when a search is executed in Home. Can return search results.\r\n            onSearch: handleSearch,\r\n\r\n            // Called when the search result is clicked in Home.\r\n            onResultDispatch: handleResultDispatch\r\n        };\r\n\r\n        var searchTopic = undefined;\r\n        async function init() {\r\n\r\n            searchTopic = await subscribe({ topic: topics.All, uuid: browserUUID });\r\n            searchTopic.register(provider);\r\n        }\r\n\r\n        init();\r\n        return () => {\r\n            if (searchTopic) {\r\n                searchTopic.deregister(provider);\r\n                searchTopic.disconnect();\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    return <div className=\"Query-Data\">{currentQuery}</div>;\r\n}\r\n\r\nexport default SearchProvider","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport function FileUploader() {\r\n\r\n    function sendFile(file) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", 'http://localhost:9999/uploads', true);\r\n\r\n        //Send the proper header information along with the request\r\n        //xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n\r\n        xhr.onreadystatechange = function () { // Call a function when the state changes.\r\n            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\r\n                console.log(`All good file ${file.name} uploaded`)\r\n            }\r\n        }\r\n        var formData = new FormData();\r\n        formData.append(\"theFile\", file);\r\n        xhr.send(formData);\r\n    }\r\n\r\n    function dropHandler(ev) {\r\n        console.log('File(s) dropped');\r\n\r\n        // Prevent default behavior (Prevent file from being opened)\r\n        ev.preventDefault();\r\n\r\n        if (ev.dataTransfer.items) {\r\n            // Use DataTransferItemList interface to access the file(s)\r\n            for (var i = 0; i < ev.dataTransfer.items.length; i++) {\r\n                // If dropped items aren't files, reject them\r\n                if (ev.dataTransfer.items[i].kind === 'file') {\r\n                    var file = ev.dataTransfer.items[i].getAsFile();\r\n                    console.log('Hello file[' + i + '].name = ' + file.name);\r\n                    sendFile(file);\r\n                }\r\n            }\r\n        } else {\r\n            // Use DataTransfer interface to access the file(s)\r\n            for (var i = 0; i < ev.dataTransfer.files.length; i++) {\r\n                console.log('file[' + i + '].name = ' + ev.dataTransfer.files[i].name);\r\n            }\r\n        }\r\n    }\r\n\r\n    function dragOverHandler(ev) {\r\n        console.log('File(s) in drop zone');\r\n\r\n        // Prevent default behavior (Prevent file from being opened)\r\n        ev.preventDefault();\r\n    }\r\n\r\n    return <div className=\"File-Uploader\" onDrop={dropHandler} onDragOver={dragOverHandler}>\r\n        <p>Drag files here to upload...</p>\r\n        <FontAwesomeIcon icon={faFileUpload} size=\"2x\" />\r\n    </div>;\r\n}","import React from 'react';\r\nimport SearchProvider from './SearchProvider';\r\nimport { FileUploader } from './FileUploader';\r\n\r\nfunction MainScreen() {\r\n    return (\r\n        <div>\r\n            <h1>OpenFin Search and Notifications Example</h1>\r\n            <p>Welcome! Load up Home to register this application as a search provider. When searches are clicked on we'll launch a message saying \"hello\".</p>\r\n\r\n            <SearchProvider />\r\n            <FileUploader />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default MainScreen;","import './App.css';\nimport MainScreen from './components/MainScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainScreen />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}